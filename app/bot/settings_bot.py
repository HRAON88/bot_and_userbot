from app.config import *
from app.userbot.usserbot_functions import *
@control_bot.message_handler(commands=['start'])
def start_control(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        control_bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    control_bot.reply_to(message, """
–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–æ–º.
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/add_trigger - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
/list_triggers - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
/delete_trigger - –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä
/check_db - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
/schedule_broadcast - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/list_broadcasts - –°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
/cancel_broadcast - –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
    """)


@control_bot.message_handler(commands=['check_db'])
def handle_check_db(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        control_bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        control_bot.reply_to(message, "üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        if check_database():
            conn = get_db_connection()
            if conn:
                with conn.cursor() as cur:
                    cur.execute("SELECT COUNT(*) FROM users")
                    users_count = cur.fetchone()[0]
                    cur.execute("SELECT COUNT(*) FROM triggers")
                    triggers_count = cur.fetchone()[0]

                    response = (
                        "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n\n"
                        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                        f"üéØ –¢—Ä–∏–≥–≥–µ—Ä–æ–≤: {triggers_count}"
                    )
                control_bot.reply_to(message, response)
                conn.close()
        else:
            control_bot.reply_to(message, "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        logger.error(error_message)
        control_bot.reply_to(message, error_message)


@control_bot.message_handler(commands=['add_trigger'])
def start_add_trigger(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    msg = control_bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É:")
    control_bot.register_next_step_handler(msg, process_trigger_step)


def process_trigger_step(message):
    try:
        if str(message.from_user.id) != str(ADMIN_ID):
            return

        trigger = message.text
        user_data[message.from_user.id] = {'trigger': trigger}

        msg = control_bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:")
        control_bot.register_next_step_handler(msg, process_response_step)
    except Exception as e:
        control_bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /add_trigger")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_trigger_step: {e}")


def process_response_step(message):
    try:
        if str(message.from_user.id) != str(ADMIN_ID):
            return


        trigger = user_data[message.from_user.id]['trigger']
        response = message.text

        conn = get_db_connection()
        if conn:
            try:
                with conn.cursor() as cur:
                    cur.execute(
                        "INSERT INTO triggers (trigger_word, response_text) VALUES (%s, %s)",
                        (trigger, response)
                    )
                    conn.commit()
                control_bot.reply_to(message, f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä '{trigger}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                logger.info(f"New trigger added: {trigger}")
            except Exception as e:
                control_bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
            finally:
                conn.close()
                if message.from_user.id in user_data:
                    del user_data[message.from_user.id]
    except Exception as e:
        control_bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /add_trigger")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_response_step: {e}")


@control_bot.message_handler(commands=['list_triggers'])
def list_triggers(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return

    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute("SELECT trigger_word, response_text FROM triggers")
                triggers = cur.fetchall()

                if triggers:
                    response = "üìù –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:\n\n"
                    for i, (trigger, response_text) in enumerate(triggers, 1):
                        response += f"{i}. –¢—Ä–∏–≥–≥–µ—Ä: {trigger}\n–û—Ç–≤–µ—Ç: {response_text}\n{'=' * 30}\n"

                    if len(response) > 4000:
                        parts = [response[i:i + 4000] for i in range(0, len(response), 4000)]
                        for part in parts:
                            control_bot.reply_to(message, part)
                    else:
                        control_bot.reply_to(message, response)
                else:
                    control_bot.reply_to(message, "‚ùå –¢—Ä–∏–≥–≥–µ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        except Exception as e:
            control_bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
            logger.error(f"Error listing triggers: {e}")
        finally:
            conn.close()


@control_bot.message_handler(commands=['start'])
def start_control(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        control_bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    control_bot.reply_to(message, """
–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–æ–º.
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/add_trigger - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
/list_triggers - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
/delete_trigger - –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä
/check_db - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """)


@control_bot.message_handler(commands=['check_db'])
def handle_check_db(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        control_bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        control_bot.reply_to(message, "üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        if check_database():
            conn = get_db_connection()
            if conn:
                with conn.cursor() as cur:
                    cur.execute("SELECT COUNT(*) FROM users")
                    users_count = cur.fetchone()[0]
                    cur.execute("SELECT COUNT(*) FROM triggers")
                    triggers_count = cur.fetchone()[0]

                    response = (
                        "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n\n"
                        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                        f"üéØ –¢—Ä–∏–≥–≥–µ—Ä–æ–≤: {triggers_count}"
                    )
                control_bot.reply_to(message, response)
                conn.close()
        else:
            control_bot.reply_to(message, "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        logger.error(error_message)
        control_bot.reply_to(message, error_message)


@control_bot.message_handler(commands=['add_trigger'])
def start_add_trigger(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    msg = control_bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É:")
    control_bot.register_next_step_handler(msg, process_trigger_step)


def process_trigger_step(message):
    try:
        if str(message.from_user.id) != str(ADMIN_ID):
            return

        trigger = message.text
        user_data[message.from_user.id] = {'trigger': trigger}

        msg = control_bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:")
        control_bot.register_next_step_handler(msg, process_response_step)
    except Exception:
        control_bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /add_trigger")


def process_response_step(message):
    try:
        if str(message.from_user.id) != str(ADMIN_ID):
            return

        trigger = user_data[message.from_user.id]['trigger']
        response = message.text

        conn = get_db_connection()
        if conn:
            try:
                with conn.cursor() as cur:
                    cur.execute(
                        "INSERT INTO triggers (trigger_word, response_text) VALUES (%s, %s)",
                        (trigger, response)
                    )
                    conn.commit()
                control_bot.reply_to(message, f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä '{trigger}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            except Exception as e:
                control_bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
            finally:
                conn.close()
                if message.from_user.id in user_data:
                    del user_data[message.from_user.id]
    except Exception as e:
        control_bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /add_trigger")


@control_bot.message_handler(commands=['list_triggers'])
def list_triggers(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return

    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute("SELECT trigger_word, response_text FROM triggers")
                triggers = cur.fetchall()

                if triggers:
                    response = "üìù –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:\n\n"
                    for i, (trigger, response_text) in enumerate(triggers, 1):
                        response += f"{i}. –¢—Ä–∏–≥–≥–µ—Ä: {trigger}\n–û—Ç–≤–µ—Ç: {response_text}\n{'=' * 30}\n"

                    if len(response) > 4000:
                        parts = [response[i:i + 4000] for i in range(0, len(response), 4000)]
                        for part in parts:
                            control_bot.reply_to(message, part)
                    else:
                        control_bot.reply_to(message, response)
                else:
                    control_bot.reply_to(message, "‚ùå –¢—Ä–∏–≥–≥–µ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        except Exception as e:
            control_bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
        finally:
            conn.close()


@control_bot.message_handler(commands=['delete_trigger'])
def delete_trigger(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return

    try:
        trigger_word = message.text.split(maxsplit=1)[1]
        conn = get_db_connection()
        if conn:
            with conn.cursor() as cur:
                cur.execute(
                    "DELETE FROM triggers WHERE trigger_word = %s RETURNING trigger_word",
                    (trigger_word,)
                )
                deleted = cur.fetchone()
                conn.commit()

                if deleted:
                    control_bot.reply_to(message, f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä '{trigger_word}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                else:
                    control_bot.reply_to(message, f"‚ùå –¢—Ä–∏–≥–≥–µ—Ä '{trigger_word}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            conn.close()
    except IndexError:
        control_bot.reply_to(message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delete_trigger —Ç—Ä–∏–≥–≥–µ—Ä_–¥–ª—è_—É–¥–∞–ª–µ–Ω–∏—è")
    except Exception as e:
        control_bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")





@control_bot.message_handler(commands=['schedule_broadcast'])
def start_schedule_broadcast(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return
    msg = control_bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    control_bot.register_next_step_handler(msg, process_broadcast_message)


def process_broadcast_message(message):
    try:
        if str(message.from_user.id) != str(ADMIN_ID):
            return

        user_data[message.from_user.id] = {'broadcast_message': message.text}

        msg = control_bot.reply_to(message,
                                   "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM\n"
                                   "–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-12-31 23:59")
        control_bot.register_next_step_handler(msg, process_broadcast_time)
    except Exception as e:
        control_bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /schedule_broadcast")
        logger.error(f"Error in process_broadcast_message: {e}")


def process_broadcast_time(message):
    try:
        if str(message.from_user.id) != str(ADMIN_ID):
            return

        scheduled_time = datetime.strptime(message.text, '%Y-%m-%d %H:%M')
        broadcast_message = user_data[message.from_user.id]['broadcast_message']

        conn = get_db_connection()
        if conn:
            try:
                with conn.cursor() as cur:
                    cur.execute(
                        "INSERT INTO broadcasts (message_text, scheduled_time) VALUES (%s, %s)",
                        (broadcast_message, scheduled_time)
                    )
                    conn.commit()
                control_bot.reply_to(message,
                                     f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_time.strftime('%Y-%m-%d %H:%M')}")
            except Exception as e:
                control_bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            finally:
                conn.close()
                if message.from_user.id in user_data:
                    del user_data[message.from_user.id]
    except ValueError:
        control_bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM")
    except Exception as e:
        control_bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /schedule_broadcast")


@control_bot.message_handler(commands=['list_broadcasts'])
def list_broadcasts(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return

    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT id, message_text, scheduled_time, status 
                    FROM broadcasts 
                    WHERE status = 'pending'
                    ORDER BY scheduled_time
                """)
                broadcasts = cur.fetchall()

                if broadcasts:
                    response = "üìù –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
                    for id, text, time, status in broadcasts:
                        response += f"ID: {id}\n–¢–µ–∫—Å—Ç: {text}\n–í—Ä–µ–º—è: {time}\n–°—Ç–∞—Ç—É—Å: {status}\n{'=' * 30}\n"
                    control_bot.reply_to(message, response)
                else:
                    control_bot.reply_to(message, "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")
        finally:
            conn.close()


@control_bot.message_handler(commands=['cancel_broadcast'])
def cancel_broadcast(message):
    try:
        broadcast_id = int(message.text.split()[1])
        conn = get_db_connection()
        if conn:
            try:
                with conn.cursor() as cur:
                    cur.execute(
                        "UPDATE broadcasts SET status = 'cancelled' WHERE id = %s AND status = 'pending'",
                        (broadcast_id,)
                    )
                    conn.commit()
                    if cur.rowcount > 0:
                        control_bot.reply_to(message, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ {broadcast_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    else:
                        control_bot.reply_to(message, f"‚ùå –†–∞—Å—Å—ã–ª–∫–∞ {broadcast_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            finally:
                conn.close()
    except (IndexError, ValueError):
        control_bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /cancel_broadcast ID")




def run_control_bot():
    while True:
        try:
            control_bot.polling(none_stop=True, interval=1)
        except Exception as e:
            logger.error(traceback.format_exc())
            time.sleep(3)